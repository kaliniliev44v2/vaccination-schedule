from fastapi import APIRouter, Depends, Form, HTTPException, Request, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import date
from typing import List, Optional

from database import get_db
from models import Patient, Doctor, Vaccine, Immunization
from routers.auth import get_current_doctor_web
from utils.schedule import calculate_age_in_months, required_mandatory_vaccines

router = APIRouter()
templates = Jinja2Templates(directory="templates")


# üè† Dashboard - –ø–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∏ –Ω–∞ –ª–µ–∫–∞—Ä—è
@router.get("/dashboard", response_class=HTMLResponse)
async def dashboard(
    request: Request, 
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(select(Patient).where(Patient.doctor_id == current_doctor.id))
        patients = result.scalars().all()
        
        return templates.TemplateResponse(
            "dashboard.html", 
            {
                "request": request, 
                "patients": patients,
                "doctor": current_doctor
            }
        )
    except Exception as e:
        print(f"Dashboard error: {e}")
        return templates.TemplateResponse(
            "dashboard.html", 
            {
                "request": request, 
                "patients": [],
                "doctor": current_doctor,
                "error": "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∏—Ç–µ"
            }
        )


# üíâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∏
@router.get("/vaccines", response_class=HTMLResponse)
async def manage_vaccines(
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(select(Vaccine).order_by(Vaccine.recommended_month))
        vaccines = result.scalars().all()
        
        return templates.TemplateResponse(
            "manage_vaccines.html",
            {
                "request": request,
                "vaccines": vaccines,
                "doctor": current_doctor
            }
        )
    except Exception as e:
        print(f"Vaccines management error: {e}")
        return templates.TemplateResponse(
            "manage_vaccines.html",
            {
                "request": request,
                "vaccines": [],
                "doctor": current_doctor,
                "error": "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∏—Ç–µ"
            }
        )


# üìù –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞
@router.get("/vaccines/{vaccine_id}/edit", response_class=HTMLResponse)
async def edit_vaccine_form(
    vaccine_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(select(Vaccine).where(Vaccine.id == vaccine_id))
        vaccine = result.scalar_one_or_none()
        
        if not vaccine:
            raise HTTPException(status_code=404, detail="–í–∞–∫—Å–∏–Ω–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞")
        
        return templates.TemplateResponse(
            "edit_vaccine.html",
            {
                "request": request,
                "vaccine": vaccine,
                "doctor": current_doctor
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"Edit vaccine form error: {e}")
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞")


# üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞
@router.post("/vaccines/{vaccine_id}/update")
async def update_vaccine_web(
    vaccine_id: int,
    request: Request,
    name: str = Form(...),
    is_mandatory: bool = Form(False),
    recommended_month: Optional[int] = Form(None),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(select(Vaccine).where(Vaccine.id == vaccine_id))
        vaccine = result.scalar_one_or_none()
        
        if not vaccine:
            raise HTTPException(status_code=404, detail="–í–∞–∫—Å–∏–Ω–∞—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞")
        
        vaccine.name = name
        vaccine.is_mandatory = is_mandatory
        vaccine.recommended_month = recommended_month if recommended_month else None
        
        await db.commit()
        return RedirectResponse(url="/vaccines", status_code=status.HTTP_303_SEE_OTHER)
        
    except Exception as e:
        print(f"Update vaccine error: {e}")
        await db.rollback()
        
        # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
        result = await db.execute(select(Vaccine).where(Vaccine.id == vaccine_id))
        vaccine = result.scalar_one_or_none()
        
        return templates.TemplateResponse(
            "edit_vaccine.html",
            {
                "request": request,
                "vaccine": vaccine,
                "doctor": current_doctor,
                "error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ: {str(e)}"
            }
        )


# ‚ûï –§–æ—Ä–º–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/new", response_class=HTMLResponse)
async def new_patient_form(
    request: Request,
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    return templates.TemplateResponse(
        "form.html", 
        {
            "request": request, 
            "patient": None, 
            "action_url": "/patients/create",
            "doctor": current_doctor
        }
    )


# üì• –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/create")
async def create_patient_web(
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    egn: str = Form(...),
    birth_date: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        result = await db.execute(select(Patient).where(Patient.egn == egn))
        existing_patient = result.scalar_one_or_none()
        if existing_patient:
            return templates.TemplateResponse(
                "form.html",
                {
                    "request": request,
                    "patient": None,
                    "action_url": "/patients/create",
                    "error": "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–æ–≤–∞ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞",
                    "doctor": current_doctor
                }
            )
        
        new_patient = Patient(
            first_name=first_name,
            last_name=last_name,
            egn=egn,
            birth_date=birth_date,
            doctor_id=current_doctor.id
        )
        db.add(new_patient)
        await db.commit()
        await db.refresh(new_patient)  # –û—Å–≤–µ–∂–∞–≤–∞–Ω–µ –Ω–∞ –æ–±–µ–∫—Ç–∞
        
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)
        
    except Exception as e:
        print(f"Create patient error: {e}")
        await db.rollback()
        
        return templates.TemplateResponse(
            "form.html",
            {
                "request": request,
                "patient": None,
                "action_url": "/patients/create",
                "error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç: {str(e)}",
                "doctor": current_doctor
            }
        )


# üìù –§–æ—Ä–º–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/{patient_id}/edit", response_class=HTMLResponse)
async def edit_patient_form(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        return templates.TemplateResponse(
            "form.html",
            {
                "request": request,
                "patient": patient,
                "action_url": f"/patients/{patient_id}/update",
                "doctor": current_doctor
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"Edit patient form error: {e}")
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞")


# üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/update")
async def update_patient_web(
    patient_id: int,
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    egn: str = Form(...),
    birth_date: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø—Ä–∏ –¥—Ä—É–≥ –ø–∞—Ü–∏–µ–Ω—Ç
        result = await db.execute(
            select(Patient).where(Patient.egn == egn, Patient.id != patient_id)
        )
        existing_patient = result.scalar_one_or_none()
        if existing_patient:
            return templates.TemplateResponse(
                "form.html",
                {
                    "request": request,
                    "patient": patient,
                    "action_url": f"/patients/{patient_id}/update",
                    "error": "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–æ–≤–∞ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞",
                    "doctor": current_doctor
                }
            )
        
        patient.first_name = first_name
        patient.last_name = last_name
        patient.egn = egn
        patient.birth_date = birth_date
        
        await db.commit()
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Update patient error: {e}")
        await db.rollback()
        
        return templates.TemplateResponse(
            "form.html",
            {
                "request": request,
                "patient": patient,
                "action_url": f"/patients/{patient_id}/update",
                "error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ: {str(e)}",
                "doctor": current_doctor
            }
        )


# ‚ùå –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/delete")
async def delete_patient_web(
    patient_id: int,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∏–º—É–Ω–∏–∑–∞—Ü–∏–∏
        result = await db.execute(
            select(Immunization).where(Immunization.patient_id == patient_id)
        )
        immunizations = result.scalars().all()
        for immunization in immunizations:
            await db.delete(immunization)
        
        await db.delete(patient)
        await db.commit()
        
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Delete patient error: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞")


# üíâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∞–∫—Å–∏–Ω–∏ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/{patient_id}/vaccines", response_class=HTMLResponse)
async def patient_vaccines(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –í–∑–µ–º–∞–º–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞ –≤ –º–µ—Å–µ—Ü–∏
        age_months = calculate_age_in_months(patient.birth_date)
        
        # –í—Å–∏—á–∫–∏ –≤–∞–∫—Å–∏–Ω–∏
        result = await db.execute(select(Vaccine))
        all_vaccines = result.scalars().all()
        
        # –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏ —Å–ø–æ—Ä–µ–¥ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞
        required_vaccines = required_mandatory_vaccines(age_months, all_vaccines)
        
        # –ü–æ—Å—Ç–∞–≤–µ–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏ —Å –¥–∞–Ω–Ω–∏ –∑–∞ –∏–º—É–Ω–∏–∑–∞—Ü–∏–∏—Ç–µ
        result = await db.execute(
            select(Immunization).where(Immunization.patient_id == patient_id)
        )
        immunizations = result.scalars().all()
        given_vaccine_ids = {imm.vaccine_id for imm in immunizations}
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ—á–Ω–∏—Ü–∏ –∑–∞ –ø–æ-–ª–µ—Å–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ
        immunization_dict = {imm.vaccine_id: imm for imm in immunizations}
        
        # –°–ø–∏—Å—ä—Ü–∏ –∑–∞ —Ç–µ–º–ø–ª–µ–π—Ç–∞
        given_vaccines = []
        for vaccine in all_vaccines:
            if vaccine.id in given_vaccine_ids:
                immunization = immunization_dict[vaccine.id]
                given_vaccines.append({
                    'vaccine': vaccine,
                    'immunization': immunization
                })
        
        missing_vaccines = [v for v in required_vaccines if v.id not in given_vaccine_ids]
        
        return templates.TemplateResponse(
            "patient_vaccines.html",
            {
                "request": request,
                "patient": patient,
                "given": given_vaccines,
                "missing": missing_vaccines,
                "doctor": current_doctor,
                "age_months": age_months
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"Patient vaccines error: {e}")
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∏—Ç–µ")


# üíâ –ë—ä—Ä–∑ –∑–∞–ø–∏—Å –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞ (–º–∞—Ä–∫–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ —Å–ª–æ–∂–µ–Ω–∞)
@router.post("/patients/{patient_id}/vaccines/{vaccine_id}/mark-given")
async def mark_vaccine_as_given(
    patient_id: int,
    vaccine_id: int,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞
        result = await db.execute(
            select(Immunization).where(
                Immunization.patient_id == patient_id,
                Immunization.vaccine_id == vaccine_id
            )
        )
        existing = result.scalar_one_or_none()
        if existing:
            # –ê–∫–æ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–µ –≤—Ä—ä—â–∞–º–µ
            return RedirectResponse(
                url=f"/patients/{patient_id}/vaccines", 
                status_code=status.HTTP_303_SEE_OTHER
            )
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∏–º—É–Ω–∏–∑–∞—Ü–∏—è —Å –¥–Ω–µ—à–Ω–∞ –¥–∞—Ç–∞
        new_immunization = Immunization(
            patient_id=patient_id,
            vaccine_id=vaccine_id,
            date_given=date.today(),
            doctor_id=current_doctor.id
        )
        db.add(new_immunization)
        await db.commit()
        
        return RedirectResponse(
            url=f"/patients/{patient_id}/vaccines", 
            status_code=status.HTTP_303_SEE_OTHER
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"Mark vaccine as given error: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞")


# üíâ –§–æ—Ä–º–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞ —Å –¥–∞—Ç–∞
@router.get("/patients/{patient_id}/vaccines/add", response_class=HTMLResponse)
async def add_vaccine_form(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –í—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏
        result = await db.execute(select(Vaccine))
        all_vaccines = result.scalars().all()
        
        # –í–µ—á–µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏
        result = await db.execute(
            select(Immunization).where(Immunization.patient_id == patient_id)
        )
        given_vaccine_ids = {imm.vaccine_id for imm in result.scalars().all()}
        
        # –í–∞–∫—Å–∏–Ω–∏, –∫–æ–∏—Ç–æ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –¥–æ–±–∞–≤—è—Ç
        available_vaccines = [v for v in all_vaccines if v.id not in given_vaccine_ids]
        
        return templates.TemplateResponse(
            "add_vaccine.html",
            {
                "request": request,
                "patient": patient,
                "vaccines": available_vaccines,
                "doctor": current_doctor
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        print(f"Add vaccine form error: {e}")
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞")


# üíâ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞ –∫—ä–º –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/vaccines/add")
async def add_vaccine_to_patient(
    patient_id: int,
    request: Request,
    vaccine_id: int = Form(...),
    date_given: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞
        result = await db.execute(
            select(Immunization).where(
                Immunization.patient_id == patient_id,
                Immunization.vaccine_id == vaccine_id
            )
        )
        existing = result.scalar_one_or_none()
        if existing:
            raise ValueError("–¢–∞–∑–∏ –≤–∞–∫—Å–∏–Ω–∞ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∏–º—É–Ω–∏–∑–∞—Ü–∏—è
        new_immunization = Immunization(
            patient_id=patient_id,
            vaccine_id=vaccine_id,
            date_given=date_given,
            doctor_id=current_doctor.id
        )
        db.add(new_immunization)
        await db.commit()
        
        return RedirectResponse(
            url=f"/patients/{patient_id}/vaccines", 
            status_code=status.HTTP_303_SEE_OTHER
        )
        
    except ValueError as ve:
        await db.rollback()
        error_message = str(ve)
    except Exception as e:
        await db.rollback()
        print(f"Add vaccine to patient error: {e}")
        error_message = f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞: {str(e)}"
    
    # –ü—Ä–∏ –≥—Ä–µ—à–∫–∞, –≤—Ä—ä—â–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –≥—Ä–µ—à–∫–∞
    try:
        result = await db.execute(select(Vaccine))
        all_vaccines = result.scalars().all()
        
        result = await db.execute(
            select(Immunization).where(Immunization.patient_id == patient_id)
        )
        given_vaccine_ids = {imm.vaccine_id for imm in result.scalars().all()}
        available_vaccines = [v for v in all_vaccines if v.id not in given_vaccine_ids]
        
        return templates.TemplateResponse(
            "add_vaccine.html",
            {
                "request": request,
                "patient": patient,
                "vaccines": available_vaccines,
                "doctor": current_doctor,
                "error": error_message
            }
        )
    except Exception as e:
        print(f"Error showing add vaccine form with error: {e}")
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞")


# ‚ùå –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞ (–æ—Ç–±–µ–ª—è–∑–≤–∞–Ω–µ –∫–∞—Ç–æ –Ω–µ —Å–ª–æ–∂–µ–Ω–∞)
@router.post("/patients/{patient_id}/vaccines/{vaccine_id}/remove")
async def remove_vaccine_from_patient(
    patient_id: int,
    vaccine_id: int,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        result = await db.execute(
            select(Patient).where(
                Patient.id == patient_id, 
                Patient.doctor_id == current_doctor.id
            )
        )
        patient = result.scalar_one_or_none()
        
        if not patient:
            raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
        
        # –ù–∞–º–∏—Ä–∞–º–µ –∏–º—É–Ω–∏–∑–∞—Ü–∏—è—Ç–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
        result = await db.execute(
            select(Immunization).where(
                Immunization.patient_id == patient_id,
                Immunization.vaccine_id == vaccine_id
            )
        )
        immunization = result.scalar_one_or_none()
        
        if immunization:
            await db.delete(immunization)
            await db.commit()
        
        return RedirectResponse(
            url=f"/patients/{patient_id}/vaccines", 
            status_code=status.HTTP_303_SEE_OTHER
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Remove vaccine error: {e}")
        await db.rollback()
        raise HTTPException(status_code=500, detail="–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞")