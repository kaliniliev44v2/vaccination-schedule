from fastapi import APIRouter, Depends, Form, HTTPException, Request, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import date
from typing import List

from database import get_db
from models import Patient, Doctor, Vaccine, Immunization
from routers.auth import get_current_doctor_web
from utils.schedule import calculate_age_in_months, required_mandatory_vaccines

router = APIRouter()
templates = Jinja2Templates(directory="templates")


# üè† Dashboard - –ø–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∏ –Ω–∞ –ª–µ–∫–∞—Ä—è
@router.get("/dashboard", response_class=HTMLResponse)
async def dashboard(
    request: Request, 
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    result = await db.execute(select(Patient).where(Patient.doctor_id == current_doctor.id))
    patients = result.scalars().all()
    
    return templates.TemplateResponse(
        "dashboard.html", 
        {
            "request": request, 
            "patients": patients,
            "doctor": current_doctor
        }
    )


# ‚ûï –§–æ—Ä–º–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/new", response_class=HTMLResponse)
async def new_patient_form(
    request: Request,
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    return templates.TemplateResponse(
        "form.html", 
        {
            "request": request, 
            "patient": None, 
            "action_url": "/patients/create",
            "doctor": current_doctor
        }
    )


# üì• –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/create")
async def create_patient_web(
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    egn: str = Form(...),
    birth_date: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        result = await db.execute(select(Patient).where(Patient.egn == egn))
        existing_patient = result.scalar_one_or_none()
        if existing_patient:
            return templates.TemplateResponse(
                "form.html",
                {
                    "request": request,
                    "patient": None,
                    "action_url": "/patients/create",
                    "error": "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–æ–≤–∞ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞",
                    "doctor": current_doctor
                }
            )
        
        new_patient = Patient(
            first_name=first_name,
            last_name=last_name,
            egn=egn,
            birth_date=birth_date,
            doctor_id=current_doctor.id
        )
        db.add(new_patient)
        await db.commit()
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)
    except Exception as e:
        return templates.TemplateResponse(
            "form.html",
            {
                "request": request,
                "patient": None,
                "action_url": "/patients/create",
                "error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç: {str(e)}",
                "doctor": current_doctor
            }
        )


# üìù –§–æ—Ä–º–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/{patient_id}/edit", response_class=HTMLResponse)
async def edit_patient_form(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    return templates.TemplateResponse(
        "form.html",
        {
            "request": request,
            "patient": patient,
            "action_url": f"/patients/{patient_id}/update",
            "doctor": current_doctor
        }
    )


# üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/update")
async def update_patient_web(
    patient_id: int,
    request: Request,
    first_name: str = Form(...),
    last_name: str = Form(...),
    egn: str = Form(...),
    birth_date: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø—Ä–∏ –¥—Ä—É–≥ –ø–∞—Ü–∏–µ–Ω—Ç
        result = await db.execute(
            select(Patient).where(Patient.egn == egn, Patient.id != patient_id)
        )
        existing_patient = result.scalar_one_or_none()
        if existing_patient:
            return templates.TemplateResponse(
                "form.html",
                {
                    "request": request,
                    "patient": patient,
                    "action_url": f"/patients/{patient_id}/update",
                    "error": "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–æ–≤–∞ –ï–ì–ù –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞",
                    "doctor": current_doctor
                }
            )
        
        patient.first_name = first_name
        patient.last_name = last_name
        patient.egn = egn
        patient.birth_date = birth_date
        
        await db.commit()
        return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)
    except Exception as e:
        return templates.TemplateResponse(
            "form.html",
            {
                "request": request,
                "patient": patient,
                "action_url": f"/patients/{patient_id}/update",
                "error": f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ: {str(e)}",
                "doctor": current_doctor
            }
        )


# ‚ùå –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/delete")
async def delete_patient_web(
    patient_id: int,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    # –ò–∑—Ç—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∏–º—É–Ω–∏–∑–∞—Ü–∏–∏
    result = await db.execute(
        select(Immunization).where(Immunization.patient_id == patient_id)
    )
    immunizations = result.scalars().all()
    for immunization in immunizations:
        await db.delete(immunization)
    
    await db.delete(patient)
    await db.commit()
    return RedirectResponse(url="/dashboard", status_code=status.HTTP_303_SEE_OTHER)


# üíâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∞–∫—Å–∏–Ω–∏ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç
@router.get("/patients/{patient_id}/vaccines", response_class=HTMLResponse)
async def patient_vaccines(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    # –í–∑–µ–º–∞–º–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞ –≤ –º–µ—Å–µ—Ü–∏
    age_months = calculate_age_in_months(patient.birth_date)
    
    # –í—Å–∏—á–∫–∏ –≤–∞–∫—Å–∏–Ω–∏
    result = await db.execute(select(Vaccine))
    all_vaccines = result.scalars().all()
    
    # –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏ —Å–ø–æ—Ä–µ–¥ –≤—ä–∑—Ä–∞—Å—Ç—Ç–∞
    required_vaccines = required_mandatory_vaccines(age_months, all_vaccines)
    
    # –ü–æ—Å—Ç–∞–≤–µ–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏
    result = await db.execute(
        select(Immunization).where(Immunization.patient_id == patient_id)
    )
    immunizations = result.scalars().all()
    given_vaccine_ids = {imm.vaccine_id for imm in immunizations}
    
    # –°–ø–∏—Å—ä—Ü–∏ –∑–∞ —Ç–µ–º–ø–ª–µ–π—Ç–∞
    given_vaccines = [v for v in all_vaccines if v.id in given_vaccine_ids]
    missing_vaccines = [v for v in required_vaccines if v.id not in given_vaccine_ids]
    
    return templates.TemplateResponse(
        "patient_vaccines.html",
        {
            "request": request,
            "patient": patient,
            "given": given_vaccines,
            "missing": missing_vaccines,
            "doctor": current_doctor,
            "age_months": age_months
        }
    )


# üíâ –§–æ—Ä–º–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞
@router.get("/patients/{patient_id}/vaccines/add", response_class=HTMLResponse)
async def add_vaccine_form(
    patient_id: int,
    request: Request,
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    # –í—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏
    result = await db.execute(select(Vaccine))
    all_vaccines = result.scalars().all()
    
    # –í–µ—á–µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∏ –≤–∞–∫—Å–∏–Ω–∏
    result = await db.execute(
        select(Immunization).where(Immunization.patient_id == patient_id)
    )
    given_vaccine_ids = {imm.vaccine_id for imm in result.scalars().all()}
    
    # –í–∞–∫—Å–∏–Ω–∏, –∫–æ–∏—Ç–æ –º–æ–≥–∞—Ç –¥–∞ —Å–µ –¥–æ–±–∞–≤—è—Ç
    available_vaccines = [v for v in all_vaccines if v.id not in given_vaccine_ids]
    
    return templates.TemplateResponse(
        "add_vaccine.html",
        {
            "request": request,
            "patient": patient,
            "vaccines": available_vaccines,
            "doctor": current_doctor
        }
    )


# üíâ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∞–∫—Å–∏–Ω–∞ –∫—ä–º –ø–∞—Ü–∏–µ–Ω—Ç
@router.post("/patients/{patient_id}/vaccines/add")
async def add_vaccine_to_patient(
    patient_id: int,
    request: Request,
    vaccine_id: int = Form(...),
    date_given: date = Form(...),
    db: AsyncSession = Depends(get_db),
    current_doctor: Doctor = Depends(get_current_doctor_web)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    result = await db.execute(
        select(Patient).where(
            Patient.id == patient_id, 
            Patient.doctor_id == current_doctor.id
        )
    )
    patient = result.scalar_one_or_none()
    
    if not patient:
        raise HTTPException(status_code=404, detail="–ü–∞—Ü–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ –Ω–µ–≥–æ")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–∞–∫—Å–∏–Ω–∞—Ç–∞ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞
        result = await db.execute(
            select(Immunization).where(
                Immunization.patient_id == patient_id,
                Immunization.vaccine_id == vaccine_id
            )
        )
        existing = result.scalar_one_or_none()
        if existing:
            raise ValueError("–¢–∞–∑–∏ –≤–∞–∫—Å–∏–Ω–∞ –≤–µ—á–µ –µ –ø–æ—Å—Ç–∞–≤–µ–Ω–∞ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∏–º—É–Ω–∏–∑–∞—Ü–∏—è
        new_immunization = Immunization(
            patient_id=patient_id,
            vaccine_id=vaccine_id,
            date_given=date_given,
            doctor_id=current_doctor.id
        )
        db.add(new_immunization)
        await db.commit()
        
        return RedirectResponse(
            url=f"/patients/{patient_id}/vaccines", 
            status_code=status.HTTP_303_SEE_OTHER
        )
    except Exception as e:
        # –ü—Ä–∏ –≥—Ä–µ—à–∫–∞, –≤—Ä—ä—â–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –≥—Ä–µ—à–∫–∞
        result = await db.execute(select(Vaccine))
        all_vaccines = result.scalars().all()
        
        result = await db.execute(
            select(Immunization).where(Immunization.patient_id == patient_id)
        )
        given_vaccine_ids = {imm.vaccine_id for imm in result.scalars().all()}
        available_vaccines = [v for v in all_vaccines if v.id not in given_vaccine_ids]
        
        return templates.TemplateResponse(
            "add_vaccine.html",
            {
                "request": request,
                "patient": patient,
                "vaccines": available_vaccines,
                "doctor": current_doctor,
                "error": str(e)
            }
        )